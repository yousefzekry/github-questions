1. What is a git repository?


- Git is a version control system used in software development to track changes in any software files.

-Repository in Git is a place where Git stores all the files. Git can store the files either
on the local repository or on the remote repository.

2. What is "git init", "git commit", "Git add"?


- The first step is to use git init which initializes a git working directory for the project and creates the .git hidden folder.
- The next step is to make changes or have already made changes.
- So far the changed files are not staged (meaning they are not added to the staging area)
- The staging area is the area which the files are placed that are ready to be committed, meaning if you place a file here and commit these files will be written in the commit.
- We use the git add <filename> the filename can be the relative path of the file to the working directory and we can add multiple files
- Or we can use git add . or git add * to add all the files that are currently located in the working directory to the staging area
- Last step is to use the git commit commmand which prompts us to create a commit with a header and a body and you can write a description for what happened in this commmit.
    - This moves the files from the staging area to the commit we just did and if you use git status, you will find that the files that were in the staging area are now gone.


3. What is the head, working tree and index?
    -HEAD refers to the currently checked-out branch's latest commit.
    for example: 
    this is the the head of branch I am currently in ==> commit 79365d5f6283e278bc7ad5f1145a26ad2c0fe68f (HEAD -> myNewBranch, origin/myNewBranch)
    Merge: 487f2dd a73ff79
    Author: Yousef Zekry <***********.**@Email.com>
    Date:   Thu Mar 30 22:13:07 2023 +0200

    comment==>Merge remote-tracking branch 'origin/refactor_update_reorder_questions' into myNewBranch
    accepted the contributer Feature

    commit a73ff798922f0e9f2f0d4164212883781535e9de (origin/refactor_update_reorder_questions, refactor_update_reorder_questions)
    Author: A-Fawzyy <*******@gmail.com>
    Date:   Thu Mar 30 02:53:34 2023 +0200


    -working tree It represents the current state of your project on your local machine. 
    When you modify files in the working tree, Git tracks the changes and stages them for the next commit.

    -Index temporary staging area for changes that you want to include in the next commit. 
    When you modify a file in the working tree, Git adds the changes to the index by using the 'git add' command.


4. What is a branch and what does it refer to?
    
    
    -its a moveable nodes, eachone have the version of the project in each commit whenever you create a new branch 
     it creates the same node in a different location for example adding a new feature and trying it before 
     merging to the production code in the main branch or developing different features by different programmers at the same time 
     so each can create his own branch and work on a different branch to develop and test the feature 
     then they can merge in a different branch for example called "Test all features" to test 
     all features working together before merging them to production   


5. What is the difference between remote and local?
    -It mainly depends on the context so lets give few examples
    -right now i am writing in this local text file of the project whenever i save my updates using 'git commit' 
    it stores it locally in my machine but when i use 'git push' it uploads this version of the textfile to the remote repo on git



6. What is the staging area?
    -Intermediate area between working repository and my next commit it goes as follows

    -working directory======'git add.'======>staging area==='git commit'====>repository
     this can benifit us by adding them localy using 'git add.' command or fo further explanation read more about gitignore to fully 
     understand the following example  

    -we can use 'git add.' command then by using gitignore we can add a specific file to gitignore and then commit changes 


7. What is an untracked file?
    -it means whenever you make a change in the file without using 'git add' command afterwards and then using ' git status '
    it will show you that  
    modified:   github-questions.txt

    -so the git is actually tracking our file for changes.

    -untracked file is a file that git is not aware about any changes made to this untracked file
    -to untrack a file that is already added use 'git rm --cached <filename>' command


8. What is .gitignore file?
    -


9. What is a pull request?
    -


---------------------------------------------------------------------------

Applying basic git

1. What is "git init", "git commit", "Git add"?
    -


2. What does git push commands do?
    -


3. What's the difference between git fetch and git pull?
    -


4. What is a git merge conflict and how does it happen? How to resolve it?
    -


5. Explain these commands one by one â€“ git status, git log, git diff, git revert <commit>, git reset <file>?
    -


6. What is git clone?
    -


7. What is git stash?
    -


8. What does git stash, git stash list, git stash clear, git stash save, git stash pop, git stash apply do?
    -


9. What does git stash drop do?
    -


10. What is git reset and mention different ways to use it and what each way does?
    -


11. What does the git squash do?
    -


12. What does git merge do in basic steps of commands?
    -


---------------------------------------------------------------------------

Intermediate Git Questions:

1. What does git annotate command do?
    -


2. What is git cherry-pick?
    -


3. What does git pull origin master do?
    -


4. How do you find a list of files that has been changed in a particular commit?
    -


5. What exactly is tagging in Git?
    -


6. Mention 3 different ways of how to revert a commit you have made? One that affects the git history and one that does not affect the git history?
    -


7. How to recover deleted commits, branches and stashed entries?
    -


8. What is the difference between centralized and decentralized repositories or git?
    -


9. How can you change any old commit messages?
    -


10. How can you add or remove or edit a file that has already been committed in an old commit? Mention a way to do it to the latest commit? and how to do it to a quite old commit?
    -


---------------------------------------------------------------------------


Advanced Git Questions:

1. Explain the different points when a merge can enter a conflicted stage.
    -


2. What has to be run to squash the last N commits into a single commit?
    -


3. What is the difference between fork, branch, and clone?
    -


4. How is Git merge different from Git rebase?
    -


5. How do you recover a deleted branch that was not merged?
    -


6. What is a detached head?
    -


7. How to avoid a detached head?
    -


8. What command helps us to know the branches merged into master and which are not?
    -


9. What about Git reflog?
    -


10. What is git bisect?
    -


11. How might you recover a branch that has previously pushed changes in the main repository yet has been coincidentally erased from each team member's local machines?
    -


12. What is git commit conventions? Make a repository with a git commit conventions and push it?
    -


13. What is Git flow?
    -


13. How can commit 2 different changes in a file to two different commits?
    -


---------------------------------------------------------------------------